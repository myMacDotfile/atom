/// <reference path="../../typings/main.d.ts" />
"use strict";
var structureImpl = require("./structureImpl");
exports.parser = require("raml-1-parser");
var universes = exports.parser.universes;
var universeHelpers = exports.parser.universeHelpers;
var defaultInterfaces = require("./structureDefaultInterfaces");
/**
 * Default label provider.
 * @param node
 * @returns {string}
 * @constructor
 */
var DefaultLabelProvider = (function () {
    function DefaultLabelProvider() {
    }
    /**
     * Gets label (text) for a high-level node.
     * @param node
     */
    DefaultLabelProvider.prototype.getLabelText = function (node) {
        if (node.isAttr()) {
            var attr = node;
            if (attr.value())
                return attr.name() + ":" + attr.value();
        }
        else if (node.isUnknown()) {
            return "Unknown";
        }
        var hlNode = node;
        if (hlNode.definition().key() === universes.Universe08.DocumentationItem
            || hlNode.definition().key() === universes.Universe10.DocumentationItem) {
            var titleAttribute = hlNode.attr("title");
            if (titleAttribute) {
                return titleAttribute.value();
            }
        }
        if (!node.lowLevel())
            return "";
        return node.name();
    };
    /**
     * Gets type text for a high-level node.
     * @param node
     */
    DefaultLabelProvider.prototype.getTypeText = function (node) {
        if (!node.isElement())
            return null;
        var hlNode = node;
        var typeAttribute = hlNode.attr("type");
        if (typeAttribute) {
            var typeValue = typeAttribute.value();
            if (typeValue == null) {
                typeValue = "";
            }
            var typeText = "";
            if (typeof typeValue === "object") {
                typeText = ":" + typeValue.valueName();
            }
            else {
                typeText = ":" + typeValue;
            }
            return typeText;
        }
        return null;
    };
    return DefaultLabelProvider;
}());
var DefaultDecorator = (function () {
    function DefaultDecorator() {
        this.decorations = {};
    }
    DefaultDecorator.prototype.addDecoration = function (nodeType, decoration) {
        this.decorations[nodeType] = decoration;
    };
    DefaultDecorator.prototype.getNodeType = function (node) {
        if (node.isAttr()) {
            return defaultInterfaces.NodeType.ATTRIBUTE;
        }
        else if (node.isUnknown()) {
            return defaultInterfaces.NodeType.UNKNOWN;
        }
        var hlNode = node;
        var nodeDefinition = hlNode.definition().key();
        if (nodeDefinition == universes.Universe08.Resource
            || nodeDefinition === universes.Universe10.Resource) {
            return defaultInterfaces.NodeType.RESOURCE;
        }
        else if (nodeDefinition === universes.Universe08.Method
            || nodeDefinition === universes.Universe10.Method) {
            return defaultInterfaces.NodeType.METHOD;
        }
        else if (nodeDefinition === universes.Universe08.AbstractSecurityScheme
            || nodeDefinition === universes.Universe10.AbstractSecurityScheme) {
            return defaultInterfaces.NodeType.SECURITY_SCHEME;
        }
        else if (nodeDefinition == universes.Universe10.TypeDeclaration
            && universeHelpers.isAnnotationTypesProperty(node.property())) {
            return defaultInterfaces.NodeType.ANNOTATION_DECLARATION;
        }
        else if (hlNode.definition().isAssignableFrom(universes.Universe10.TypeDeclaration.name) ||
            hlNode.definition().isAssignableFrom(universes.Universe08.Parameter.name)) {
            return defaultInterfaces.NodeType.TYPE_DECLARATION;
        }
        else if (nodeDefinition === universes.Universe08.DocumentationItem
            || nodeDefinition === universes.Universe10.DocumentationItem) {
            return defaultInterfaces.NodeType.DOCUMENTATION_ITEM;
        }
        if (node.lowLevel().unit() != node.root().lowLevel().unit()) {
            return defaultInterfaces.NodeType.EXTERNAL_UNIT;
        }
        return defaultInterfaces.NodeType.OTHER;
    };
    DefaultDecorator.prototype.getDecoration = function (node) {
        var nodeType = this.getNodeType(node);
        if (!nodeType)
            return null;
        return this.decorations[nodeType];
    };
    /**
     * Gets node icon.
     * @param node
     */
    DefaultDecorator.prototype.getIcon = function (node) {
        var decoration = this.getDecoration(node);
        if (!decoration)
            return null;
        return decoration.icon;
    };
    /**
     * Gets node text style.
     * @param node
     */
    DefaultDecorator.prototype.getTextStyle = function (node) {
        var decoration = this.getDecoration(node);
        if (!decoration)
            return null;
        return decoration.textStyle;
    };
    return DefaultDecorator;
}());
exports.DefaultDecorator = DefaultDecorator;
var _defaultDecorator = new DefaultDecorator();
var _defaultLabelProvider = new DefaultLabelProvider();
/**
 * Adds another decoration to the default decorator, allowing simple set up
 * of decorations as a map from node type to its icon and text style.
 * @param nodeType
 * @param decoration
 */
function addDecoration(nodeType, decoration) {
    _defaultDecorator.addDecoration(nodeType, decoration);
}
exports.addDecoration = addDecoration;
/**
 * Default implementation of key provider.
 * @param node
 * @constructor
 */
function DefaultKeyProvider(node) {
    if (!node)
        return null;
    if (node && !node.parent()) {
        return node.name();
    }
    else {
        return node.name() + " :: " + DefaultKeyProvider(node.parent());
    }
}
/**
 * Default implementation of visibility filter.
 * @param node
 * @constructor
 */
function DefaultVisibilityFilter(node) {
    return true;
}
/**
 * Intializes default providers.
 */
function initialize() {
    structureImpl.setKeyProvider(DefaultKeyProvider);
    structureImpl.addLabelProvider(_defaultLabelProvider);
    structureImpl.addDecorator(_defaultDecorator);
    structureImpl.setVisibilityFilter(DefaultVisibilityFilter);
}
exports.initialize = initialize;
//# sourceMappingURL=structureDefault.js.map