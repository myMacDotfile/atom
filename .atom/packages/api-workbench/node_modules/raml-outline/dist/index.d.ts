import structure = require("./structure/structureInterfaces");
import structureDefaultInterfaces = require("./structure/structureDefaultInterfaces");
export declare type StructureNodeJSON = structure.StructureNodeJSON;
export declare type StructureNode = structure.StructureNode;
export declare type LabelProvider = structure.LabelProvider;
export declare type Decorator = structure.Decorator;
export declare type ContentProvider = structure.ContentProvider;
export declare type CategoryFilter = structure.CategoryFilter;
export declare type VisibilityFilter = structure.VisibilityFilter;
export declare type IASTProvider = structure.IASTProvider;
export declare type KeyProvider = structure.KeyProvider;
export import NodeType = structureDefaultInterfaces.NodeType;
export declare type Decoration = structureDefaultInterfaces.Decoration;
export declare type TypedStructureNode = structureDefaultInterfaces.TypedStructureNode;
export declare function initialize(): void;
export declare function setASTProvider(astProvider: structure.IASTProvider): void;
export declare function addLabelProvider(provider: structure.LabelProvider): void;
export declare function addDecorator(decorator: structure.Decorator): void;
export declare function addCategoryFilter(categoryName: string, categoryFilter: structure.CategoryFilter): void;
export declare function setVisibilityFilter(visibilityFilter: structure.VisibilityFilter): void;
export declare function setContentProvider(contentProvider: structure.ContentProvider): void;
export declare function setKeyProvider(keyProvider: structure.KeyProvider): void;
export declare function getStructure(categoryName: string): structure.StructureNode;
export declare function getStructureForAllCategories(): {
    [categoryName: string]: structure.StructureNode;
};
export declare function addDecoration(nodeType: NodeType, decoration: Decoration): void;
export declare function isTypedStructureNode(node: StructureNode): node is TypedStructureNode;
