"use strict";
var ramlOutline = require("../../index");
var rp = require("raml-1-parser");
var universes = rp.universes;
function keyProvider(node) {
    if (!node)
        return null;
    if (node && !node.parent())
        return node.name();
    else
        return node.name() + " :: " + keyProvider(node.parent());
}
exports.keyProvider = keyProvider;
function initialize(root) {
    var astProvider = {
        getASTRoot: function () {
            return root;
        },
        getSelectedNode: function () {
            return root;
        }
    };
    initialize2(astProvider);
}
exports.initialize = initialize;
function initialize2(astProvider) {
    ramlOutline.setASTProvider(astProvider);
    ramlOutline.initialize();
    ramlOutline.setKeyProvider(keyProvider);
    createCategories();
    createDecorations();
}
exports.initialize2 = initialize2;
function isResource(p) {
    return (p.definition().key() === universes.Universe08.Resource || p.definition().key() === universes.Universe10.Resource);
}
exports.isResource = isResource;
var prohibit = {
    resources: true,
    schemas: true,
    types: true,
    resourceTypes: true,
    traits: true
};
function isOther(p) {
    if (p.property()) {
        var nm = p.property().nameId();
        if (prohibit[nm]) {
            return false;
        }
    }
    return true;
}
exports.isOther = isOther;
function isResourceTypeOrTrait(p) {
    var pc = p.definition().key();
    return (pc === universes.Universe08.ResourceType
        || pc === universes.Universe10.ResourceType ||
        pc === universes.Universe08.Trait
        ||
            pc === universes.Universe10.Trait);
}
exports.isResourceTypeOrTrait = isResourceTypeOrTrait;
function isSchemaOrType(p) {
    var pc = p.definition().key();
    return (pc === universes.Universe08.GlobalSchema) || (p.property() && p.property().nameId()
        == universes.Universe10.LibraryBase.properties.types.name);
}
exports.isSchemaOrType = isSchemaOrType;
function createCategories() {
    ramlOutline.addCategoryFilter("ResourcesCategory", isResource);
    ramlOutline.addCategoryFilter("SchemasAndTypesCategory", isSchemaOrType);
    ramlOutline.addCategoryFilter("ResourceTypesAndTraitsCategory", isResourceTypeOrTrait);
    ramlOutline.addCategoryFilter("OtherCategory", isOther);
}
function createDecorations() {
    ramlOutline.addDecoration(ramlOutline.NodeType.ATTRIBUTE, {
        icon: "ARROW_SMALL_LEFT",
        textStyle: "NORMAL"
    });
    ramlOutline.addDecoration(ramlOutline.NodeType.RESOURCE, {
        icon: "PRIMITIVE_SQUARE",
        textStyle: "HIGHLIGHT"
    });
    ramlOutline.addDecoration(ramlOutline.NodeType.METHOD, {
        icon: "PRIMITIVE_DOT",
        textStyle: "WARNING"
    });
    ramlOutline.addDecoration(ramlOutline.NodeType.SECURITY_SCHEME, {
        icon: "FILE_SUBMODULE",
        textStyle: "NORMAL"
    });
    ramlOutline.addDecoration(ramlOutline.NodeType.ANNOTATION_DECLARATION, {
        icon: "TAG",
        textStyle: "HIGHLIGHT"
    });
    ramlOutline.addDecoration(ramlOutline.NodeType.TYPE_DECLARATION, {
        icon: "FILE_BINARY",
        textStyle: "SUCCESS"
    });
    ramlOutline.addDecoration(ramlOutline.NodeType.DOCUMENTATION_ITEM, {
        icon: "BOOK",
        textStyle: "NORMAL"
    });
}
//# sourceMappingURL=outline-initializer.js.map